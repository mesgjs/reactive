r = reactive({ options })
* Options:
*   cmp: (old, new) => old !== new (immutable)
*   def: old => new
*   eager: truthy = undefined
*   v: initialValue = undefined

reactive ("class" properties and methods)
-----------------------------------------
batch(cb) - batch changes made by callback
* return value is return value of callback
fv(v, bundle = false) - returns the final (non-reactive) value of v
* If bundle is true, returns the _bundle() value for bundles.
run() - attempt to run the evaluation queue
* not generally invoked directly by users
type - 1 (scalar reactive)
typeOf(v) - return the reactive type of v
* reactive.type, reactiveBundle.type, or undefined
untracked(cb) - run the callback without tracking dependencies
* return value is return value of callback

r ("instance" properties and methods)
-------------------------------------
r.bundle - The associated reactiveBundle state or undefined
r.cmp - The comparison function for this reactive (read-only)
r.consumer(c, add = true) - (Un)register a consumer reactive
* intended for use by other reactives, not users
r.def = def, r.def(def?) - Set/change (or return) definition
* def is undefined: clear definition
* def is a function: set/change the definition
* def is a reactive: track reactive value
* r.def returns the def() method (function)
* r.def() returns the current definition.
* r.def(def) returns r for chaining
r.eager = new, r.eager(new?) - Get/set evaluation eagerness
* r.eager returns the eager() method (function)
* r.eager() returns the current eager status
* r.eager(new) returns r for chaining
r.gf - Return the getter function
r.gsp - Return the [getter, setter] function pair
r.provider(p, add = true) - (Un)register a provider reactive
* intended for use by other reactives, not users
r.$reactive - The reactive type (reactive.type)
r.readonly - False for the main reactive
r.ripple(dis = 0) - Ripple changes across the dependency graph
* dis is the distance from the change
* intended for use by other reactives, not users
r.rov - Return the read-only view
* rov.gf - Return the getter function
* rov.$reactive - Return the type (reactive.type)
* rov.readonly - True for the read-only view
* rov.rv - Readable value
* rov.toString - toString function
* rov.valueOf - valueOf function
r.rv - Readable value (cannot be set)
r.set - Set a new value (chainable)
* r.set(old => new)
* r.set(value)
r.sf - Return the setter function
* r.sf(old => new)
* r.sf(value)
* returns the newly-set value
r.toString - toString function
r.unready() - Force calculated value to be unready (chainable)
r.valueOf - valueOf function
r.wv - Writable value
* Also readable for read-modify-write operations like += and --,
* but .rv should be used for read-only operations to clarify intent.
